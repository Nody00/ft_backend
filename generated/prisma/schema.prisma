// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  ADMIN
  CUSTOMER
}

enum NotificationTypes {
  NEW_USER
  NEW_EXPENSE
  NEW_INCOME
  NEW_TRANSFER
  TRANSFER_SUCCESS
  TRANSFER_FAIL
}

enum Action {
  READ
  CREATE
  UPDATE
  DELETE
}

enum Resource {
  USER
  PERMISSION
  INCOME
  EXPENSE
  TRANSFER
  EXPENSE_TYPE
  INCOME_TYPE
  NOTIFICATION
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  created_at        DateTime       @default(now())
  role_id           Int
  role              Role           @relation(fields: [role_id], references: [id])
  expenses          Expense[]
  income            Income[]
  sentTransfers     Transfer[]     @relation("SentTransfers")
  receivedTransfers Transfer[]     @relation("ReceivedTransfers")
  notifications     Notification[]
  deleted           Boolean        @default(false)

  @@map("users")
}

model Role {
  id          Int           @id @default(autoincrement())
  name        RoleName      @unique
  permissions Permissions[]
  users       User[]
  deleted     Boolean       @default(false)

  @@map("roles")
}

model Permissions {
  id       Int      @id @default(autoincrement())
  roleId   Int
  role     Role     @relation(fields: [roleId], references: [id])
  resource Resource
  actions  Action[]

  @@unique([roleId, resource])
  @@map("permissions")
}

model Expense {
  id              Int         @id @default(autoincrement())
  name            String
  expense_type_id Int
  amount          Float // Consider using Decimal or Float for monetary values in a real application
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  user_id         Int
  expenseType     ExpenseType @relation(fields: [expense_type_id], references: [id])
  user            User        @relation(fields: [user_id], references: [id])
  deleted         Boolean     @default(false)

  @@map("expenses")
}

model Income {
  id             Int        @id @default(autoincrement())
  name           String
  income_type_id Int
  amount         Float // Consider using Decimal or Float for monetary values in a real application
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  user_id        Int
  incomeType     IncomeType @relation(fields: [income_type_id], references: [id])
  user           User       @relation(fields: [user_id], references: [id])
  deleted        Boolean    @default(false)

  @@map("income")
}

model ExpenseType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  expenses Expense[]
  deleted  Boolean   @default(false)

  @@map("expense_type")
}

model IncomeType {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  income  Income[]
  deleted Boolean  @default(false)

  @@map("income_type")
}

model Transfer {
  id           Int      @id @default(autoincrement())
  description  String?
  sender_id    Int
  recipient_id Int
  amount       Float // Consider using Decimal or Float for monetary values in a real application
  created_at   DateTime @default(now())
  sender       User     @relation("SentTransfers", fields: [sender_id], references: [id])
  recipient    User     @relation("ReceivedTransfers", fields: [recipient_id], references: [id])
  deleted      Boolean  @default(false)

  @@map("transfers")
}

model Notification {
  id          Int               @id @default(autoincrement())
  description String?
  type        NotificationTypes
  created_at  DateTime          @default(now())
  user_id     Int
  user        User              @relation(fields: [user_id], references: [id])
  deleted     Boolean           @default(false)

  @@map("notifications")
}
